name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - name: Build
      run: cargo build --verbose
    - name: Run linters
      run: cargo clippy -- -D warnings
    - name: Check formatting
      run: cargo fmt --check
    - name: Run tests
      run: cargo test --verbose
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
    - name: Run tests with coverage (tarpaulin)
      run: cargo tarpaulin --out Lcov --output-dir ./coverage
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: ./coverage/lcov.info

  build_docker_image:
    needs: build_and_test # Depends on the successful completion of build_and_test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./rust_quote_service # Path to the directory containing the Dockerfile and build context
          file: ./rust_quote_service/Dockerfile # Path to the Dockerfile
          push: false # For MVP, we are not pushing to a registry
          tags: rustquote-service:latest # Tag the image
          # Optional: Add build arguments if your Dockerfile needs them
          # build-args: |
          #   ARG_NAME=value